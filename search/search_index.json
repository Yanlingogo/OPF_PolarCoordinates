{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OPF in rectangular coordinats","text":"<p>The introduction is divided into three parts. </p>"},{"location":"#problem-formulation","title":"Problem Formulation","text":"<p>Introduces the basics and advantages of using Cartesian coordinates.</p>"},{"location":"#run-opf","title":"Run OPF","text":"<p>Set the required variables, and write the objective function and constraints, and use matpower and casadi to solve the OPF and compare the results.</p>"},{"location":"#sensitivity","title":"Sensitivity","text":"<p>Use CasADi's tool and write the first-order and second-order formulas in rectangular coordinates to calculate Jacobian and Hessian, and then compare the calculation results.</p>"},{"location":"Problem%20formulation/","title":"Problem Formulation","text":"<p>Here, we represent the PF problem in rectangular voltage coordinates, which is the classic representation. $$ V_i = U_i+\\textrm j W_i $$ and the knote admittance is expressed in rectangular coordinates: $$Y_{ik} = G_{ik}+\\textrm{j}B_{ik}$$ For the admittance matrix elements, rectangular coordinates are typically favored because they facilitate the use of certain approximations in fast-decoupled solution methods </p> <p>The objective in OPF is to minimize the total cost of electricity generation while maintaining the electric power system within safe operating limits. The mathematical formulation is shown as follows:  $$\\min {f}=\\min {\\sum_{i\\in G}^{}(c_{1,i}\\cdot P_i+c_{2,i}\\cdot P_i^2)}$$ $\\textrm{s.t.}$ $$ P_i(U,W)=C_g\\cdot P_g-P_d\\qquad \\forall i \\in \\mathbf{N}\\notag $$ $$ Q_i(U,W)=C_g\\cdot Q_g-Q_d\\qquad \\forall i \\in \\mathbf{N}\\notag $$ $$ P_i^{G,\\min}\\le P_i^{G}\\le P_i^{G,\\max}\\qquad \\forall i \\in \\mathbf{G}\\notag $$ $$ Q_i^{G,\\min}\\le Q_i^{G}\\le Q_i^{G,\\max}\\qquad \\forall i \\in \\mathbf{G}\\notag $$ $$ {V^{\\textrm{min}}_i}^2\\le U_i^2+W_i^2 \\le {V^{\\textrm{max}}_i}^2\\qquad \\forall i \\in \\mathbf{N}\\notag $$ The first two equations are the PF equations. The remaining constraints represent bounds on the system voltages and powers. Typically, load real and reactive power are fixed while generator real and reactive power are control variables subject to minimum and maximum limits. The voltage magnitude and angle at the system slack bus are also fixed, usually to $U_n=1, W_n=0$.</p> <p>OPF formulations may include branch current limits, which is omitted in this example.</p> <p>expressing voltage in rectangular coordinates eliminates trigonometric functions from the PF equations. The resulting PF Equations are quadratic, which presents several advantages:</p> <ul> <li>The elimination of trigonometric functions speeds evaluation of the equations.</li> <li>The second order Taylor series expansion of a quadratic function is exact; this yields an efficiency advantage in higher-order interior-point algorithms for OPF.</li> <li>The Hessian matrix for a quadratic function is constant and must be evaluated only once. This simplifies the application of Newton\u2019s method to the Karush\u2013KuhnTucker (KKT) conditions of the OPF formulation.</li> <li>If the side constraints are also quadratic, then the entire OPF problem becomes a Quadratically Constrained Program, although it remains non-convex. This enables the use of specialized solution algorithms.</li> </ul>"},{"location":"run%20OPF/","title":"Run OPF","text":"<p>In this example, the case14 will be solved by Matpower and CasADi, and the feasibility of CasADi's solution will be verified by comparing the results of the them.</p>"},{"location":"run%20OPF/#create-index-for-buses-branches-generators","title":"create index for buses, branches, generators","text":"<p>In order to use casadi to solve OPF, the data format of matpower should be exported firstly.idx_ entries_pf(1,2,3,4) variables, which should be optimizied. </p>"},{"location":"run%20OPF/#set-parameters-for-the-constraints","title":"set parameters for the constraints","text":"<p>Set baseMVA, calculation uses per unit value cost_param Vmax,Vmin Pgmax,Pgmin Qgmax,Qgmin Fmax Pd, Qd: demand Cg: Sparse matrix, indicating the connection between the unit and the node, 1 means there is a connection initial state:</p>"},{"location":"run%20OPF/#set-the-objective-function","title":"set the objective function","text":"<p>$$f=\\sum_{i\\in G}^{}(c_{1,i}\\cdot P_i+c_{2,i}\\cdot P_i^2)$$ the parameters $c_{1,i}$ and $c_{2,i}$ are from the Date of 'case14'</p>"},{"location":"run%20OPF/#equality-and-inequality-constraints","title":"equality and inequality constraints","text":"<p>According to the parameters set before, equality constraints and inequality constraints can be written.</p> <p>Slack Bus: At the slack bus, or swing bus, the voltage magnitude and angle are fixed and the power injections are free.The purpose of the slack bus is twofold.First,itprovidesavoltage reference (typically $U$ = 1.0 p.u. and $W$ = 0)suchthat the remaining bus voltages are uniquely determined; we explain the per unit system \u201cp.u.\u201d in Appendix C.Second,asitisthe only bus at which real power is free to vary, the slack bus is required to ensure that the power flow equations have a feasible solution. There is only one slack bus in a power system model.</p> <p>power flow equation: The balance of active power therefore remains as a equality constraint.For any node, the sum of fed power, output power and node power demand is zero. $$P =W\\circ(G_{\\textrm bus}\\cdot W+B_{\\textrm bus}\\cdot U) + U \\circ (G_{\\textrm bus}\\cdot U -B_{\\textrm bus}\\cdot W)+ P_d - C_g\\cdot P_g$$ $$Q =W\\circ(G_{\\textrm bus}\\cdot U-B_{\\textrm bus}\\cdot W) - U \\circ (G_{\\textrm bus}\\cdot W +B_{\\textrm bus}\\cdot U)+ P_d - C_g\\cdot Q_g$$ '$\\circ$' means'.*' in matlab, multiplies arrays A and B by multiplying corresponding elements together. A and B must be the same or compatible in size.</p> <p>upper and lower bound for voltage magnitude was given before.</p> <p>Line limit: Technically, the power transmitted by the line should be less than the power limit of the line. In this example, in order to simplify the problem, the power limit of the cable is not considered.</p>"},{"location":"run%20OPF/#reference-solution","title":"reference solution","text":"<p>Use matpower to calculate the case and view the calculation results(Vr,Vi,Pg,Qg).</p> <p>For the details about the mpoption please refer to MATPOWER Documentation</p>"},{"location":"run%20OPF/#solve-the-problem-by-casadi","title":"Solve the Problem by CasADi","text":""},{"location":"run%20OPF/#setting-problem","title":"Setting Problem","text":"<ul> <li>Get the dimensions of a variable</li> <li>Create the new variables x_SX by using SX.sym</li> <li>Set the objective function and constraints, please refer to problem formulation</li> <li>Set the tolerance, For the details about the mpoption please refer to CasADi Documentation</li> </ul> <ul> <li>Solve the Problem by using nplsol</li> </ul>"},{"location":"run%20OPF/#results","title":"Results","text":"<p>sol is assigned to retrieve optimized results. The result 'x' of the solution includes the voltage of the node in rectangular coordinates and the apparent power. Lagrangian multipliers for different constraints are also given. </p> <p>Download and run it to view the calculation results. </p>"},{"location":"sensitivity/","title":"Sensitivities","text":"<p>This section shows how the power flow sensitivities can be used.</p> <p>All gradient-based optimization methods require sensitivities. By sensitivities we mean one (or all) of the following:</p> <ul> <li>gradients,</li> <li>Jacobians, and/or</li> <li>Hessians.</li> </ul>"},{"location":"sensitivity/#computation","title":"Computation","text":""},{"location":"sensitivity/#by-casadi","title":"By CasADi","text":"<p>Casadi has tools available to calculate the Jacobian and Hessian: </p> <pre><code>jac_casadi  = jacobian(constraint,x_SX);\nhess_casadi = hessian(objective+lam_SX'*constraint, x_SX);\nsens = Function('sens',{x_SX, lam_SX},{jac_casadi,hess_casadi}); \n</code></pre>"},{"location":"sensitivity/#by-created-function","title":"By Created function","text":"<p>We can also write the calculation formulas of jacobian and hessian by ourselves, and compare whether it is consistent with the results calculated directly by CasADi.</p>"},{"location":"sensitivity/#jacobian","title":"Jacobian","text":"<ul> <li>Jacobian of Voltage(Inequality): Because the voltage constraint is for the square of the magnitude. $$J_{\\textrm{voltage}}=[2U,2W,zeros_{14 \\times10} ]$$</li> <li>Jacobian of Flow equation(equality): First, there is a slack node in the example, and the slack node is added to the Jacobian. $P_u$ represents the derivative of power with respect to the u,$Q_u,P_w,Q_w$ can be deduced by analogy.  The calculation of the derivative of power to power is very simple and directly extended to the Jacobian</li> </ul>  $$ \\begin{align}     \\frac{\\partial P^S}{\\partial u} &amp;= \\left[e\\right]+\\left[u\\right] \\cdot G + \\left[w\\right] \\cdot B\\notag\\\\     \\frac{\\partial Q^S}{\\partial u}&amp; = -\\left[f\\right] + \\left[w\\right] \\cdot G - \\left[u\\right] \\cdot B\\notag\\\\     \\frac{\\partial P^S}{\\partial w} &amp;= \\left[f\\right]+\\left[w\\right] \\cdot G - \\left[u\\right] \\cdot B\\notag\\\\     \\frac{\\partial Q^S}{\\partial w} &amp;= \\left[e\\right] - \\left[u\\right] \\cdot G - \\left[w\\right] \\cdot B\\notag \\end{align}  $$  <ul> <li>Branch limit: </li> </ul>"},{"location":"sensitivity/#hessian","title":"Hessian","text":"<ul> <li>The hessian of $J+\\sum \\lambda_i \\cdot c_i$ is calculated as follows:</li> </ul>      $$     \\begin{aligned}         S_{xx} &amp;= \\begin{bmatrix}                 S_{uu} &amp; S_{uw} &amp; 0 &amp; 0 \\\\                 S_{wu} &amp; S_{ww} &amp; 0 &amp; 0 \\\\                 0 &amp; 0 &amp; 0 &amp; 0 \\\\                 0 &amp; 0 &amp; 0 &amp; 0 \\\\              \\end{bmatrix}     \\end{aligned}     $$     $$     \\begin{align}     S_{uu}&amp;=[\\lambda_p] \\cdot G + G^\\top\\cdot[\\lambda_p]-[\\lambda_q] \\cdot B + B^\\top\\cdot[\\lambda_q] \\notag \\\\     S_{uw}&amp;=B^\\top \\cdot[\\lambda_p] - [\\lambda_p]\\cdot B+ G^\\top\\cdot[\\lambda_q]-[\\lambda_q]\\cdot G\\notag \\\\     \\end{align}     $$  <ul> <li>Branch limit: </li> </ul>"}]}